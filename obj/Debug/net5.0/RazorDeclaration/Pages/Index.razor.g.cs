// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace chess.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\chess11\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\chess11\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\chess11\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\chess11\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\chess11\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\chess11\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\chess11\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\chess11\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\chess11\_Imports.razor"
using chess;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\chess11\_Imports.razor"
using chess.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\chess11\Pages\Index.razor"
using chess.Movement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\chess11\Pages\Index.razor"
using chess.Mechanics;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 49 "E:\chess11\Pages\Index.razor"
 
    private bool _botEnabled = true;
    private Cell _selectedFigCell;
    private string[,] _classes = new string[9, 9];

    protected override void OnInitialized()
    {
    }

    private async void FigureClick(Cell cell)
    {
        if (_selectedFigCell == null)
        {
            FigureSelect(cell);
        }
        else
        {
            var move = FigureMove(cell);

            if (move == null)
                //ход не состоялся, делаем еще один
                FigureSelect(cell);

            if (move != null)
            {
                //состоялся, озвучим
                Sound(move);

                //пусть походит бот?
                if (_botEnabled && Desk.Instance.CurrentSide == Side.Black)
                {
                    move = await Desk.Instance.BotMove();
                    if (move == null) return;
                    Sound(move);
                }
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    //выбираем только
    private void FigureSelect(Cell cell)
    {
        var figObj = Desk.Instance.GetFigure(cell);
        if (figObj == null)
            //клик в пустую клетку на этапе выбора фигуры
            return;
        if (figObj.Side != Desk.Instance.CurrentSide)
            //выбранная фигура не совпала с стороной текущего хода
            return;

        _selectedFigCell = cell;
        GlowCell(_selectedFigCell, GlowType.Selected);

        //засветим доступные ходы
        foreach (var move in Desk.Instance.GetAllowedMoves(figObj).ToArray())
            GlowCell(move, GlowType.CanMove);
    }

    //ходим или бъем
    private Move FigureMove(Cell cell)
    {
        var newClickCell = cell;
        Move move = null;

        //проверим разрешенность хода
        var figObj = Desk.Instance.GetFigure(_selectedFigCell);
        var allowedMoves = Desk.Instance.GetAllowedMoves(figObj).ToArray();
        var allowedMove = allowedMoves.FirstOrDefault(x => x.Equals(newClickCell));
        if (allowedMove != null)
        {
            move = new Move(from: _selectedFigCell, to: allowedMove);
            Desk.Instance.Move(move);
            Desk.Instance.MovesReadableString += move + " ";
            var consequenceType = figObj.MoveConsequences(allowedMove);
            if (consequenceType == ConsequenceType.QueenGrows)
                JS.InvokeAsync<string>("PlaySound", "sound_growth");
            Desk.Instance.ChangeSide();
            Desk.Instance.CheckShahmat(figObj, move);
        }

        GlowCell(_selectedFigCell, GlowType.Stop);
        _selectedFigCell = null;

        return move;
    }

    private void GlowCell(Cell cell, GlowType glowType)
    {
        if (glowType == GlowType.Stop)
        {
            Array.Clear(_classes, 0, _classes.Length);
            return;
        }
        var className = GetClassByGlowType(glowType);
        var toCoord = cell.ToArray();
        _classes.SetValue(className, toCoord);
    }

    private string GetClassByGlowType(GlowType type)
    {
        switch (type)
        {
            case GlowType.Selected:
                return "f-sel";
            case GlowType.CanMove:
                return "f-move";
            case GlowType.Stop:
                return "";
            default:
                return "";
        }
    }

    private void TestLayout() => Desk.Instance.TestLayout();

    private void ResetDesk()
    {
        Desk.Instance.Reset();
        GlowCell(_selectedFigCell, GlowType.Stop);
    }

    //private void RestoreDesk() => Desk.RestoreDesk();

    private string GetSoundByType(Move move)
    {
        if (move.Mat)
            return "sound_mat";
        if (move.Shah)
            return "sound_shah";
        if (move.Victim != null)
            return "sound_take";
        return "sound_move";
    }

    async void Sound(Move move)
    {
        await JS.InvokeAsync<string>("PlaySound", GetSoundByType(move));
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JS { get; set; }
    }
}
#pragma warning restore 1591
