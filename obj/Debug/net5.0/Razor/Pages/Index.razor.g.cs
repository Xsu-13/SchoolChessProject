#pragma checksum "E:\chess11\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bab82f4c16a6b6acfd5026883ac9f14d84862afe"
// <auto-generated/>
#pragma warning disable 1591
namespace chess.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\chess11\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\chess11\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\chess11\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\chess11\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\chess11\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\chess11\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\chess11\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\chess11\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\chess11\_Imports.razor"
using chess;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\chess11\_Imports.razor"
using chess.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\chess11\Pages\Index.razor"
using chess.Movement;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\chess11\Pages\Index.razor"
using chess.Mechanics;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, "<audio id=\"sound_move\" src=\"/move.mp3\"></audio>\r\n<audio id=\"sound_take\" src=\"/take.mp3\"></audio>\r\n<audio id=\"sound_mat\" src=\"/mat.mp3\"></audio>\r\n<audio id=\"sound_shah\" src=\"/shah.mp3\"></audio>\r\n<audio id=\"sound_growth\" src=\"/grows.mp3\"></audio>\r\n\r\n");
            __builder.OpenElement(1, "table");
            __builder.OpenElement(2, "tr");
            __builder.OpenElement(3, "td");
            __builder.OpenElement(4, "div");
            __builder.AddAttribute(5, "style", "padding: 30px; background-color: dimgray");
            __builder.AddMarkupContent(6, "<img src=\"/img/150.png\" style=\"width:800px;\">");
#nullable restore
#line 17 "E:\chess11\Pages\Index.razor"
                 for (int x = 0; x < 8; x++)
                {
                    for (int y = 0; y < 8; y++)
                    {
                        var cell = new Cell(x, y);
                        var img = string.IsNullOrEmpty(Desk.Instance.Matrix[x, y]?.ImgCode) ? "transparent.png" : Desk.Instance.Matrix[x, y].ImgCode + ".png";

#line default
#line hidden
#nullable disable
            __builder.OpenElement(7, "img");
            __builder.AddAttribute(8, "class", 
#nullable restore
#line 23 "E:\chess11\Pages\Index.razor"
                                     _classes[x, y]

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(9, "src", "/img/" + (
#nullable restore
#line 23 "E:\chess11\Pages\Index.razor"
                                                                img

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(10, "style", "width:100px;" + " position:absolute;" + " top:" + (
#nullable restore
#line 23 "E:\chess11\Pages\Index.razor"
                                                                                                                  750 - 100 * y

#line default
#line hidden
#nullable disable
            ) + "px;" + " left:" + (
#nullable restore
#line 23 "E:\chess11\Pages\Index.razor"
                                                                                                                                           63 + 100 * x

#line default
#line hidden
#nullable disable
            ) + "px");
            __builder.AddAttribute(11, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 23 "E:\chess11\Pages\Index.razor"
                                                                                                                                                                      () => FigureClick(cell)

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseElement();
#nullable restore
#line 24 "E:\chess11\Pages\Index.razor"
                    }
                }

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "E:\chess11\Pages\Index.razor"
                 for (int x = 0; x < 8; x++)
                {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(12, "span");
            __builder.AddAttribute(13, "style", "color:" + " white;" + " position:absolute;" + " top:850px;" + " left:" + (
#nullable restore
#line 29 "E:\chess11\Pages\Index.razor"
                                                                                    110+100*x

#line default
#line hidden
#nullable disable
            ) + "px");
            __builder.AddContent(14, 
#nullable restore
#line 29 "E:\chess11\Pages\Index.razor"
                                                                                                    (char)('a' + x)

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(15, "\r\n                    ");
            __builder.OpenElement(16, "span");
            __builder.AddAttribute(17, "style", "color:" + " white;" + " position:absolute;" + " top:" + (
#nullable restore
#line 30 "E:\chess11\Pages\Index.razor"
                                                                        790-100*x

#line default
#line hidden
#nullable disable
            ) + "px;" + " left:" + " 43px");
            __builder.AddContent(18, 
#nullable restore
#line 30 "E:\chess11\Pages\Index.razor"
                                                                                                    x + 1

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
#nullable restore
#line 31 "E:\chess11\Pages\Index.razor"
                }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(19, "\r\n        ");
            __builder.OpenElement(20, "td");
            __builder.AddAttribute(21, "style", "vertical-align:top; padding-left:20px");
            __builder.AddMarkupContent(22, "<h3>ИНДИВИДУАЛЬНЫЙ ИТОГОВЫЙ ПРОЕКТ<br>\"Компьютерный Шахматист\"</h3>\r\n            ");
            __builder.AddMarkupContent(23, "<h4>Косоногова Ксения Викторовна, 11 «Б»</h4><br>\r\n            ");
            __builder.OpenElement(24, "label");
            __builder.OpenElement(25, "input");
            __builder.AddAttribute(26, "type", "checkbox");
            __builder.AddAttribute(27, "checked", Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 37 "E:\chess11\Pages\Index.razor"
                                                 _botEnabled

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(28, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => _botEnabled = __value, _botEnabled));
            __builder.SetUpdatesAttributeName("checked");
            __builder.CloseElement();
            __builder.AddMarkupContent(29, " Компьютерный шахматист включен");
            __builder.CloseElement();
            __builder.AddMarkupContent(30, "  <br><br>\r\n            ");
            __builder.OpenElement(31, "button");
            __builder.AddAttribute(32, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 38 "E:\chess11\Pages\Index.razor"
                              ResetDesk

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(33, "Новая партия");
            __builder.CloseElement();
            __builder.AddContent(34, " ");
            __builder.OpenElement(35, "button");
            __builder.AddAttribute(36, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 38 "E:\chess11\Pages\Index.razor"
                                                                                 TestLayout

#line default
#line hidden
#nullable disable
            ));
            __builder.AddMarkupContent(37, "Тестовая расстановка");
            __builder.CloseElement();
            __builder.AddMarkupContent(38, "<br><br>\r\n\r\n            Сейчас ход ");
            __builder.OpenElement(39, "b");
            __builder.AddContent(40, 
#nullable restore
#line 40 "E:\chess11\Pages\Index.razor"
                            Desk.Instance.CurrentSide == Side.White ? "Белых" : "Черных"

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(41, "<br>\r\n            Ходов проверено: ");
            __builder.AddContent(42, 
#nullable restore
#line 41 "E:\chess11\Pages\Index.razor"
                              Bot.PostitionsChecked

#line default
#line hidden
#nullable disable
            );
            __builder.AddMarkupContent(43, "<br><br>\r\n            Журнал ходов: ");
            __builder.AddContent(44, 
#nullable restore
#line 42 "E:\chess11\Pages\Index.razor"
                           Desk.Instance.MovesReadableString

#line default
#line hidden
#nullable disable
            );
            __builder.AddMarkupContent(45, " <br>");
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 49 "E:\chess11\Pages\Index.razor"
 
    private bool _botEnabled = true;
    private Cell _selectedFigCell;
    private string[,] _classes = new string[9, 9];

    protected override void OnInitialized()
    {
    }

    private async void FigureClick(Cell cell)
    {
        if (_selectedFigCell == null)
        {
            FigureSelect(cell);
        }
        else
        {
            var move = FigureMove(cell);

            if (move == null)
                //ход не состоялся, делаем еще один
                FigureSelect(cell);

            if (move != null)
            {
                //состоялся, озвучим
                Sound(move);

                //пусть походит бот?
                if (_botEnabled && Desk.Instance.CurrentSide == Side.Black)
                {
                    move = await Desk.Instance.BotMove();
                    if (move == null) return;
                    Sound(move);
                }
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    //выбираем только
    private void FigureSelect(Cell cell)
    {
        var figObj = Desk.Instance.GetFigure(cell);
        if (figObj == null)
            //клик в пустую клетку на этапе выбора фигуры
            return;
        if (figObj.Side != Desk.Instance.CurrentSide)
            //выбранная фигура не совпала с стороной текущего хода
            return;

        _selectedFigCell = cell;
        GlowCell(_selectedFigCell, GlowType.Selected);

        //засветим доступные ходы
        foreach (var move in Desk.Instance.GetAllowedMoves(figObj).ToArray())
            GlowCell(move, GlowType.CanMove);
    }

    //ходим или бъем
    private Move FigureMove(Cell cell)
    {
        var newClickCell = cell;
        Move move = null;

        //проверим разрешенность хода
        var figObj = Desk.Instance.GetFigure(_selectedFigCell);
        var allowedMoves = Desk.Instance.GetAllowedMoves(figObj).ToArray();
        var allowedMove = allowedMoves.FirstOrDefault(x => x.Equals(newClickCell));
        if (allowedMove != null)
        {
            move = new Move(from: _selectedFigCell, to: allowedMove);
            Desk.Instance.Move(move);
            Desk.Instance.MovesReadableString += move + " ";
            var consequenceType = figObj.MoveConsequences(allowedMove);
            if (consequenceType == ConsequenceType.QueenGrows)
                JS.InvokeAsync<string>("PlaySound", "sound_growth");
            Desk.Instance.ChangeSide();
            Desk.Instance.CheckShahmat(figObj, move);
        }

        GlowCell(_selectedFigCell, GlowType.Stop);
        _selectedFigCell = null;

        return move;
    }

    private void GlowCell(Cell cell, GlowType glowType)
    {
        if (glowType == GlowType.Stop)
        {
            Array.Clear(_classes, 0, _classes.Length);
            return;
        }
        var className = GetClassByGlowType(glowType);
        var toCoord = cell.ToArray();
        _classes.SetValue(className, toCoord);
    }

    private string GetClassByGlowType(GlowType type)
    {
        switch (type)
        {
            case GlowType.Selected:
                return "f-sel";
            case GlowType.CanMove:
                return "f-move";
            case GlowType.Stop:
                return "";
            default:
                return "";
        }
    }

    private void TestLayout() => Desk.Instance.TestLayout();

    private void ResetDesk()
    {
        Desk.Instance.Reset();
        GlowCell(_selectedFigCell, GlowType.Stop);
    }

    //private void RestoreDesk() => Desk.RestoreDesk();

    private string GetSoundByType(Move move)
    {
        if (move.Mat)
            return "sound_mat";
        if (move.Shah)
            return "sound_shah";
        if (move.Victim != null)
            return "sound_take";
        return "sound_move";
    }

    async void Sound(Move move)
    {
        await JS.InvokeAsync<string>("PlaySound", GetSoundByType(move));
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JS { get; set; }
    }
}
#pragma warning restore 1591
